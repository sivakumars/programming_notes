#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses_db")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def search_expenses(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_count(results)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'"
    result = @connection.exec(sql)

    if result[0]["count"] == "0"
      sql = File.read('schema.sql')
      @connection.exec(sql)
    end
  end

  def display_expenses(result)
    result.each do |tuple|
      id = tuple["id"].rjust(3)
      created_on = tuple["created_on"].rjust(10)
      amount = tuple["amount"].rjust(12)
      memo = tuple["memo"]

      puts "#{id} | #{created_on} | #{amount} | #{memo}"
    end

    puts "-" * 50
    total_amount = expenses.field_values("amount").map(&:to_f).inject(:+)

    puts "Total #{total_amount.to_s.rjust(25)}"
  end

  def display_count(result)
    count = result.ntuples

    if count == 0
      puts "There are no expenses."
    else
      puts "There are #{count} expense#{"s" if count != 1}."
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.first

    if command == "list"
      @application.list_expenses
    elsif command == "add"
      abort "You must provide an amount and memo." if args.size < 3
      @application.add_expense(args[1], args[2])
    elsif command == "search"
      abort "You must provide a search term." if args.size < 2
      @application.search_expenses(args[1])
    elsif command == "delete"
      abort "You must provide an id." if args.size < 2
      @application.delete_expense(args[1])
    elsif command == "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = $stdin.getch
      @application.delete_all_expenses if answer == "y"
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP

    puts <<~HEREDOC
    Line 1

    Line 2
    HEREDOC
  end
end

CLI.new.run(ARGV)
